{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red144\green1\blue18;\red255\green255\blue254;\red0\green0\blue0;
\red0\green0\blue255;\red19\green120\blue72;\red107\green0\blue1;\red15\green112\blue1;}
{\*\expandedcolortbl;;\cssrgb\c63922\c8235\c8235;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;
\cssrgb\c0\c0\c100000;\cssrgb\c3529\c53333\c35294;\cssrgb\c50196\c0\c0;\cssrgb\c0\c50196\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl460\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 'use strict'\cf4 \strokec4 ;\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf4 \cb3 process.stdin.resume();\cb1 \
\cb3 process.stdin.setEncoding(\cf2 \strokec2 'utf-8'\cf4 \strokec4 );\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf5 \cb3 \strokec5 let\cf4 \strokec4  inputString = \cf2 \strokec2 ''\cf4 \strokec4 ;\cb1 \
\cf5 \cb3 \strokec5 let\cf4 \strokec4  currentLine = \cf6 \strokec6 0\cf4 \strokec4 ;\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf4 \cb3 process.stdin.on(\cf2 \strokec2 'data'\cf4 \strokec4 , inputStdin => \{\cb1 \
\cb3     inputString += inputStdin;\cb1 \
\cb3 \});\cb1 \
\
\cb3 process.stdin.on(\cf2 \strokec2 'end'\cf4 \strokec4 , _ => \{\cb1 \
\cb3     inputString = inputString.trim().split(\cf2 \strokec2 '\\n'\cf4 \strokec4 ).map(string => \{\cb1 \
\cb3         \cf5 \strokec5 return\cf4 \strokec4  string.trim();\cb1 \
\cb3     \});\cb1 \
\cb3     \cb1 \
\cb3     main();    \cb1 \
\cb3 \});\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  readLine() \{\cb1 \
\pard\pardeftab720\sl460\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 return\cf4 \strokec4  inputString[currentLine++];\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  getLetter(s) \{\cb1 \
\pard\pardeftab720\sl460\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 var\cf4 \strokec4  a = \cf7 \strokec7 /[aeiou\cf4 \strokec4 ]\cf7 \strokec7 /\cf4 \strokec4 ;\cb1 \
\cb3     \cf5 \strokec5 var\cf4 \strokec4  b = \cf7 \strokec7 /[bcdfg\cf4 \strokec4 ]\cf7 \strokec7 /\cf4 \strokec4 ;\cb1 \
\cb3     \cf5 \strokec5 var\cf4 \strokec4  c = \cf7 \strokec7 /[hjklm\cf4 \strokec4 ]\cf7 \strokec7 /\cf4 \strokec4 ;\cb1 \
\cb3     \cf5 \strokec5 var\cf4 \strokec4  d = \cf7 \strokec7 /[npqrstvwxyz\cf4 \strokec4 ]\cf7 \strokec7 /\cf4 \strokec4 ;\cb1 \
\cb3     \cf5 \strokec5 var\cf4 \strokec4  char = s.charAt(\cf6 \strokec6 0\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 let\cf4 \strokec4  letter;\cb1 \
\cb3     \cf8 \strokec8 // Write your code here\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 switch\cf4 \strokec4  (\cf5 \strokec5 true\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf5 \strokec5 case\cf4 \strokec4  a.test(char):\cb1 \
\cb3             letter = \cf2 \strokec2 'A'\cf4 \strokec4 ;\cb1 \
\cb3             \cf5 \strokec5 break\cf4 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 case\cf4 \strokec4  b.test(char):\cb1 \
\cb3             letter = \cf2 \strokec2 'B'\cf4 \strokec4 ;\cb1 \
\cb3             \cf5 \strokec5 break\cf4 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 case\cf4 \strokec4  c.test(char):\cb1 \
\cb3             letter = \cf2 \strokec2 'C'\cf4 \strokec4 ;\cb1 \
\cb3             \cf5 \strokec5 break\cf4 \strokec4 ;\cb1 \
\cb3         \cf5 \strokec5 default\cf4 \strokec4 :\cb1 \
\cb3             letter = \cf2 \strokec2 'D'\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  letter;\cb1 \
\cb3 \}\cb1 \
\
\
\pard\pardeftab720\sl460\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  main() \{\cb1 \
\pard\pardeftab720\sl460\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 const\cf4 \strokec4  s = readLine();\cb1 \
\cb3     \cb1 \
\cb3     console.log(getLetter(s));\cb1 \
\cb3 \}}