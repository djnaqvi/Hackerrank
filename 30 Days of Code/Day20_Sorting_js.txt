{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue254;\red144\green1\blue18;
\red0\green0\blue255;\red19\green120\blue72;\red15\green112\blue1;\red14\green110\blue109;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c99608;\cssrgb\c63922\c8235\c8235;
\cssrgb\c0\c0\c100000;\cssrgb\c3529\c53333\c35294;\cssrgb\c0\c50196\c0;\cssrgb\c0\c50196\c50196;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl460\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 process.stdin.resume();\cb1 \
\cb3 process.stdin.setEncoding(\cf4 \strokec4 'ascii'\cf2 \strokec2 );\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf5 \cb3 \strokec5 var\cf2 \strokec2  input_stdin = \cf4 \strokec4 ""\cf2 \strokec2 ;\cb1 \
\cf5 \cb3 \strokec5 var\cf2 \strokec2  input_stdin_array = \cf4 \strokec4 ""\cf2 \strokec2 ;\cb1 \
\cf5 \cb3 \strokec5 var\cf2 \strokec2  input_currentline = \cf6 \strokec6 0\cf2 \strokec2 ;\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf2 \cb3 process.stdin.on(\cf4 \strokec4 'data'\cf2 \strokec2 , \cf5 \strokec5 function\cf2 \strokec2  (data) \{\cb1 \
\cb3     input_stdin += data;\cb1 \
\cb3 \});\cb1 \
\
\cb3 process.stdin.on(\cf4 \strokec4 'end'\cf2 \strokec2 , \cf5 \strokec5 function\cf2 \strokec2  () \{\cb1 \
\cb3     input_stdin_array = input_stdin.split(\cf4 \strokec4 "\\n"\cf2 \strokec2 );\cb1 \
\cb3     main();\cb1 \
\cb3 \});\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf5 \cb3 \strokec5 function\cf2 \strokec2  readLine() \{\cb1 \
\pard\pardeftab720\sl460\partightenfactor0
\cf2 \cb3     \cf5 \strokec5 return\cf2 \strokec2  input_stdin_array[input_currentline++];\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf7 \cb3 \strokec7 /////////////// ignore above this line ////////////////////\cf2 \cb1 \strokec2 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf5 \cb3 \strokec5 function\cf2 \strokec2  main() \{\cb1 \
\pard\pardeftab720\sl460\partightenfactor0
\cf2 \cb3     \cf5 \strokec5 var\cf2 \strokec2  n = parseInt(readLine());\cb1 \
\cb3     a = readLine().split(\cf4 \strokec4 ' '\cf2 \strokec2 );\cb1 \
\cb3     a = a.map(\cf8 \strokec8 Number\cf2 \strokec2 );\cb1 \
\cb3     \cf7 \strokec7 // Write Your Code Here\cf2 \cb1 \strokec2 \
\cb3     bubbleSort(a);\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf5 \cb3 \strokec5 function\cf2 \strokec2  bubbleSort(a) \{\cb1 \
\pard\pardeftab720\sl460\partightenfactor0
\cf2 \cb3     \cf5 \strokec5 var\cf2 \strokec2  n = a.length;\cb1 \
\cb3     \cf5 \strokec5 var\cf2 \strokec2  sumSwap = \cf6 \strokec6 0\cf2 \strokec2 ;\cb1 \
\cb3     \cf5 \strokec5 for\cf2 \strokec2  (\cf5 \strokec5 var\cf2 \strokec2  j = \cf6 \strokec6 0\cf2 \strokec2 ; j < n; j++) \{\cb1 \
\cb3         \cf5 \strokec5 var\cf2 \strokec2  numSwap = \cf6 \strokec6 0\cf2 \strokec2 ;\cb1 \
\cb3         \cf5 \strokec5 for\cf2 \strokec2  (\cf5 \strokec5 var\cf2 \strokec2  i = \cf6 \strokec6 0\cf2 \strokec2 ; i < n - \cf6 \strokec6 1\cf2 \strokec2 ; i++) \{\cb1 \
\cb3             \cf5 \strokec5 if\cf2 \strokec2  (a[i] > a[i + \cf6 \strokec6 1\cf2 \strokec2 ]) \{\cb1 \
\cb3                 \cf5 \strokec5 var\cf2 \strokec2  temp = a[i + \cf6 \strokec6 1\cf2 \strokec2 ];\cb1 \
\cb3                 a[i + \cf6 \strokec6 1\cf2 \strokec2 ] = a[i];\cb1 \
\cb3                 a[i] = temp;\cb1 \
\cb3                 numSwap++;\cb1 \
\cb3             \}\cb1 \
\cb3         \}\cb1 \
\cb3         sumSwap += numSwap;\cb1 \
\cb3     \}\cb1 \
\
\cb3     console.log(\cf4 \strokec4 "Array is sorted in "\cf2 \strokec2  + sumSwap + \cf4 \strokec4 " swaps."\cf2 \strokec2 );\cb1 \
\cb3     console.log(\cf4 \strokec4 "First Element: "\cf2 \strokec2  + a[\cf6 \strokec6 0\cf2 \strokec2 ]);\cb1 \
\cb3     console.log(\cf4 \strokec4 "Last Element: "\cf2 \strokec2  + a[n - \cf6 \strokec6 1\cf2 \strokec2 ]);\cb1 \
\cb3 \}}