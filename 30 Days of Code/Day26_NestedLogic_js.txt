{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red255\green255\blue254;\red0\green0\blue0;
\red15\green112\blue1;\red144\green1\blue18;\red19\green120\blue72;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c100000;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;
\cssrgb\c0\c50196\c0;\cssrgb\c63922\c8235\c8235;\cssrgb\c3529\c53333\c35294;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl460\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 function\cf4 \strokec4  processData(input) \{\cb1 \
\pard\pardeftab720\sl460\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 //Enter your code here\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 var\cf4 \strokec4  dates = input.split(\cf6 \strokec6 '\\n'\cf4 \strokec4 );\cb1 \
\cb3     \cf2 \strokec2 var\cf4 \strokec4  returnedDate = dates[\cf7 \strokec7 0\cf4 \strokec4 ].split(\cf6 \strokec6 ' '\cf4 \strokec4 );\cb1 \
\cb3     \cf2 \strokec2 var\cf4 \strokec4  dueDate = dates[\cf7 \strokec7 1\cf4 \strokec4 ].split(\cf6 \strokec6 ' '\cf4 \strokec4 );\cb1 \
\cb3     console.log(fineAmount(dueDate, returnedDate));\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf2 \cb3 \strokec2 function\cf4 \strokec4  fineAmount(dueDate, returnedDate) \{\cb1 \
\pard\pardeftab720\sl460\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 var\cf4 \strokec4  fine = \cf7 \strokec7 0\cf4 \strokec4 ; \cf5 \strokec5 // delare fine variable\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 //split due date values\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 var\cf4 \strokec4  dD = parseInt(dueDate[\cf7 \strokec7 0\cf4 \strokec4 ]), \cf5 \strokec5 // day due\cf4 \cb1 \strokec4 \
\cb3         dM = parseInt(dueDate[\cf7 \strokec7 1\cf4 \strokec4 ]), \cf5 \strokec5 // month due\cf4 \cb1 \strokec4 \
\cb3         dY = parseInt(dueDate[\cf7 \strokec7 2\cf4 \strokec4 ]); \cf5 \strokec5 // year due\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 //split returned date values\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 var\cf4 \strokec4  rD = parseInt(returnedDate[\cf7 \strokec7 0\cf4 \strokec4 ]), \cf5 \strokec5 // day returned\cf4 \cb1 \strokec4 \
\cb3         rM = parseInt(returnedDate[\cf7 \strokec7 1\cf4 \strokec4 ]), \cf5 \strokec5 // month returned\cf4 \cb1 \strokec4 \
\cb3         rY = parseInt(returnedDate[\cf7 \strokec7 2\cf4 \strokec4 ]); \cf5 \strokec5 // year returned\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  ((rD <= dD) && (rM <= dM) && (rY <= dY)) \{\cb1 \
\cb3         fine = \cf7 \strokec7 0\cf4 \strokec4 ; \cf5 \strokec5 // if returned before or on due date\cf4 \cb1 \strokec4 \
\cb3     \} \cf2 \strokec2 else\cf4 \strokec4  \cf2 \strokec2 if\cf4 \strokec4  ((rD > dD) && (rM == dM) && (rY == dY)) \{\cb1 \
\cb3         fine = \cf7 \strokec7 15\cf4 \strokec4  * (rD - dD); \cf5 \strokec5 // if returned after expected day\cf4 \cb1 \strokec4 \
\cb3     \} \cf2 \strokec2 else\cf4 \strokec4  \cf2 \strokec2 if\cf4 \strokec4  ((rM > dM) && (rY == dY)) \{\cb1 \
\cb3         fine = \cf7 \strokec7 500\cf4 \strokec4  * (rM - dM); \cf5 \strokec5 // if returned after expected month\cf4 \cb1 \strokec4 \
\cb3     \} \cf2 \strokec2 else\cf4 \strokec4  \cf2 \strokec2 if\cf4 \strokec4  (rY > dY) \{\cb1 \
\cb3         fine = \cf7 \strokec7 10000\cf4 \strokec4 ; \cf5 \strokec5 // if returned after expected year\cf4 \cb1 \strokec4 \
\cb3     \}\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  fine;\cb1 \
\cb3 \}\cb1 \
\
\cb3 process.stdin.resume();\cb1 \
\cb3 process.stdin.setEncoding(\cf6 \strokec6 "ascii"\cf4 \strokec4 );\cb1 \
\cb3 _input = \cf6 \strokec6 ""\cf4 \strokec4 ;\cb1 \
\cb3 process.stdin.on(\cf6 \strokec6 "data"\cf4 \strokec4 , \cf2 \strokec2 function\cf4 \strokec4  (input) \{\cb1 \
\cb3     _input += input;\cb1 \
\cb3 \});\cb1 \
\
\cb3 process.stdin.on(\cf6 \strokec6 "end"\cf4 \strokec4 , \cf2 \strokec2 function\cf4 \strokec4  () \{\cb1 \
\cb3    processData(_input);\cb1 \
\cb3 \});}