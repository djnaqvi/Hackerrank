{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red255\green255\blue254;\red0\green0\blue0;
\red19\green120\blue72;\red144\green1\blue18;\red107\green0\blue1;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c100000;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;
\cssrgb\c3529\c53333\c35294;\cssrgb\c63922\c8235\c8235;\cssrgb\c50196\c0\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl460\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 def\cf4 \strokec4  minimum_index(seq):\cb1 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf2 \strokec2 len\cf4 \strokec4 (seq) == \cf5 \strokec5 0\cf4 \strokec4 :\cb1 \
\cb3         \cf2 \strokec2 raise\cf4 \strokec4  ValueError(\cf6 \strokec6 "Cannot get the minimum value index from an empty sequence"\cf4 \strokec4 )\cb1 \
\cb3     min_idx = \cf5 \strokec5 0\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  i \cf2 \strokec2 in\cf4 \strokec4  \cf2 \strokec2 range\cf4 \strokec4 (\cf5 \strokec5 1\cf4 \strokec4 , \cf2 \strokec2 len\cf4 \strokec4 (seq)):\cb1 \
\cb3         \cf2 \strokec2 if\cf4 \strokec4  seq[i] < seq[min_idx]:\cb1 \
\cb3             min_idx = i\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  min_idx\cb1 \
\cf2 \cb3 \strokec2 class\cf4 \strokec4  TestDataEmptyArray():\cb1 \
\
\cb3     \cf7 \strokec7 @staticmethod\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 def\cf4 \strokec4  get_array():\cb1 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  \cf2 \strokec2 list\cf4 \strokec4 ()\cb1 \
\
\cf2 \cb3 \strokec2 class\cf4 \strokec4  TestDataUniqueValues():\cb1 \
\
\cb3     \cf7 \strokec7 @staticmethod\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 def\cf4 \strokec4  get_array():\cb1 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  [\cf5 \strokec5 5\cf4 \strokec4 , \cf5 \strokec5 2\cf4 \strokec4 , \cf5 \strokec5 8\cf4 \strokec4 , \cf5 \strokec5 3\cf4 \strokec4 , \cf5 \strokec5 1\cf4 \strokec4 , \cf5 \strokec5 -6\cf4 \strokec4 , \cf5 \strokec5 9\cf4 \strokec4 ]\cb1 \
\
\cb3     \cf7 \strokec7 @staticmethod\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 def\cf4 \strokec4  get_expected_result():\cb1 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 5\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 class\cf4 \strokec4  TestDataExactlyTwoDifferentMinimums():\cb1 \
\
\cb3     \cf7 \strokec7 @staticmethod\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 def\cf4 \strokec4  get_array():\cb1 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  [\cf5 \strokec5 5\cf4 \strokec4 , \cf5 \strokec5 2\cf4 \strokec4 , \cf5 \strokec5 8\cf4 \strokec4 , \cf5 \strokec5 3\cf4 \strokec4 , \cf5 \strokec5 1\cf4 \strokec4 , \cf5 \strokec5 -6\cf4 \strokec4 , \cf5 \strokec5 9\cf4 \strokec4 , \cf5 \strokec5 -6\cf4 \strokec4 , \cf5 \strokec5 10\cf4 \strokec4 ]\cb1 \
\
\cb3     \cf7 \strokec7 @staticmethod\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 def\cf4 \strokec4  get_expected_result():\cb1 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 5\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 def\cf4 \strokec4  TestWithEmptyArray():\cb1 \
\cb3     \cf2 \strokec2 try\cf4 \strokec4 :\cb1 \
\cb3         seq = TestDataEmptyArray.get_array()\cb1 \
\cb3         result = minimum_index(seq)\cb1 \
\cb3     \cf2 \strokec2 except\cf4 \strokec4  ValueError \cf2 \strokec2 as\cf4 \strokec4  e:\cb1 \
\cb3         \cf2 \strokec2 pass\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 else\cf4 \strokec4 :\cb1 \
\cb3         \cf2 \strokec2 assert\cf4 \strokec4  \cf2 \strokec2 False\cf4 \cb1 \strokec4 \
\
\
\cf2 \cb3 \strokec2 def\cf4 \strokec4  TestWithUniqueValues():\cb1 \
\cb3     seq = TestDataUniqueValues.get_array()\cb1 \
\cb3     \cf2 \strokec2 assert\cf4 \strokec4  \cf2 \strokec2 len\cf4 \strokec4 (seq) >= \cf5 \strokec5 2\cf4 \cb1 \strokec4 \
\
\cb3     \cf2 \strokec2 assert\cf4 \strokec4  \cf2 \strokec2 len\cf4 \strokec4 (\cf2 \strokec2 list\cf4 \strokec4 (\cf2 \strokec2 set\cf4 \strokec4 (seq))) == \cf2 \strokec2 len\cf4 \strokec4 (seq)\cb1 \
\
\cb3     expected_result = TestDataUniqueValues.get_expected_result()\cb1 \
\cb3     result = minimum_index(seq)\cb1 \
\cb3     \cf2 \strokec2 assert\cf4 \strokec4  result == expected_result\cb1 \
\
\
\cf2 \cb3 \strokec2 def\cf4 \strokec4  TestiWithExactyTwoDifferentMinimums():\cb1 \
\cb3     seq = TestDataExactlyTwoDifferentMinimums.get_array()\cb1 \
\cb3     \cf2 \strokec2 assert\cf4 \strokec4  \cf2 \strokec2 len\cf4 \strokec4 (seq) >= \cf5 \strokec5 2\cf4 \cb1 \strokec4 \
\cb3     tmp = \cf2 \strokec2 sorted\cf4 \strokec4 (seq)\cb1 \
\cb3     \cf2 \strokec2 assert\cf4 \strokec4  tmp[\cf5 \strokec5 0\cf4 \strokec4 ] == tmp[\cf5 \strokec5 1\cf4 \strokec4 ] \cf2 \strokec2 and\cf4 \strokec4  (\cf2 \strokec2 len\cf4 \strokec4 (tmp) == \cf5 \strokec5 2\cf4 \strokec4  \cf2 \strokec2 or\cf4 \strokec4  tmp[\cf5 \strokec5 1\cf4 \strokec4 ] < tmp[\cf5 \strokec5 2\cf4 \strokec4 ])\cb1 \
\
\cb3     expected_result = TestDataExactlyTwoDifferentMinimums.get_expected_result()\cb1 \
\cb3     result = minimum_index(seq)\cb1 \
\cb3     \cf2 \strokec2 assert\cf4 \strokec4  result == expected_result\cb1 \
\
\cb3 TestWithEmptyArray()\cb1 \
\cb3 TestWithUniqueValues()\cb1 \
\cb3 TestiWithExactyTwoDifferentMinimums()\cb1 \
\cf2 \cb3 \strokec2 print\cf4 \strokec4 (\cf6 \strokec6 "OK"\cf4 \strokec4 )}