{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red15\green112\blue1;\red255\green255\blue254;\red0\green0\blue0;
\red0\green0\blue255;\red14\green110\blue109;\red19\green120\blue72;\red144\green1\blue18;}
{\*\expandedcolortbl;;\cssrgb\c0\c50196\c0;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;
\cssrgb\c0\c0\c100000;\cssrgb\c0\c50196\c50196;\cssrgb\c3529\c53333\c35294;\cssrgb\c63922\c8235\c8235;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl460\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // Start of function Node\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf6 \strokec6 Node\cf4 \strokec4 (data) \{\cb1 \
\cb3     \cf5 \strokec5 this\cf4 \strokec4 .data = data;\cb1 \
\cb3     \cf5 \strokec5 this\cf4 \strokec4 .left = \cf5 \strokec5 null\cf4 \strokec4 ;\cb1 \
\cb3     \cf5 \strokec5 this\cf4 \strokec4 .right = \cf5 \strokec5 null\cf4 \strokec4 ;\cb1 \
\cb3 \}; \cf2 \strokec2 // End of function Node\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 // Start of function BinarySearchTree\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf6 \strokec6 BinarySearchTree\cf4 \strokec4 () \{\cb1 \
\cb3     \cf5 \strokec5 this\cf4 \strokec4 .insert = \cf5 \strokec5 function\cf4 \strokec4 (root, data) \{\cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (root === \cf5 \strokec5 null\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf5 \strokec5 this\cf4 \strokec4 .root = \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Node\cf4 \strokec4 (data);\cb1 \
\cb3             \cb1 \
\cb3             \cf5 \strokec5 return\cf4 \strokec4  \cf5 \strokec5 this\cf4 \strokec4 .root;\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (data <= root.data) \{\cb1 \
\cb3             \cf5 \strokec5 if\cf4 \strokec4  (root.left) \{\cb1 \
\cb3                 \cf5 \strokec5 this\cf4 \strokec4 .insert(root.left, data);\cb1 \
\cb3             \} \cf5 \strokec5 else\cf4 \strokec4  \{\cb1 \
\cb3                 root.left = \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Node\cf4 \strokec4 (data);\cb1 \
\cb3             \}\cb1 \
\cb3         \} \cf5 \strokec5 else\cf4 \strokec4  \{\cb1 \
\cb3             \cf5 \strokec5 if\cf4 \strokec4  (root.right) \{\cb1 \
\cb3                 \cf5 \strokec5 this\cf4 \strokec4 .insert(root.right, data);\cb1 \
\cb3             \} \cf5 \strokec5 else\cf4 \strokec4  \{\cb1 \
\cb3                 root.right = \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Node\cf4 \strokec4 (data);\cb1 \
\cb3             \}\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 return\cf4 \strokec4  \cf5 \strokec5 this\cf4 \strokec4 .root;\cb1 \
\cb3     \};\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Start of function getHeight\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 this\cf4 \strokec4 .getHeight = \cf5 \strokec5 function\cf4 \strokec4 (root) \{\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (root == \cf5 \strokec5 null\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf5 \strokec5 return\cf4 \strokec4  -\cf7 \strokec7 1\cf4 \strokec4 ; \cf2 \strokec2 //Return -1; exit this function.\cf4 \cb1 \strokec4 \
\cb3         \} \cf2 \strokec2 //If root isn't null, we're still in getHeight.\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 return\cf4 \strokec4  \cf7 \strokec7 1\cf4 \strokec4  + \cf6 \strokec6 Math\cf4 \strokec4 .max(\cf5 \strokec5 this\cf4 \strokec4 .getHeight(root.left), \cf5 \strokec5 this\cf4 \strokec4 .getHeight(root.right));\cb1 \
\cb3         \cf2 \strokec2 //This returns the heights of left and right paths, determines max height, and adds 1 to give height of tree.\cf4 \cb1 \strokec4 \
\
\cb3     \}; \cf2 \strokec2 // End of function getHeight\cf4 \cb1 \strokec4 \
\cb3 \}; \cf2 \strokec2 // End of function BinarySearchTree\cf4 \cb1 \strokec4 \
\
\cb3 process.stdin.resume();\cb1 \
\cb3 process.stdin.setEncoding(\cf8 \strokec8 'ascii'\cf4 \strokec4 );\cb1 \
\
\cf5 \cb3 \strokec5 var\cf4 \strokec4  _input = \cf8 \strokec8 ""\cf4 \strokec4 ;\cb1 \
\
\cb3 process.stdin.on(\cf8 \strokec8 'data'\cf4 \strokec4 , \cf5 \strokec5 function\cf4 \strokec4  (data) \{\cb1 \
\cb3     _input += data;\cb1 \
\cb3 \});\cb1 \
\
\cb3 process.stdin.on(\cf8 \strokec8 'end'\cf4 \strokec4 , \cf5 \strokec5 function\cf4 \strokec4  () \{\cb1 \
\cb3     \cf5 \strokec5 var\cf4 \strokec4  tree = \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 BinarySearchTree\cf4 \strokec4 ();\cb1 \
\cb3     \cf5 \strokec5 var\cf4 \strokec4  root = \cf5 \strokec5 null\cf4 \strokec4 ;\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 var\cf4 \strokec4  values = _input.split(\cf8 \strokec8 '\\n'\cf4 \strokec4 ).map(\cf6 \strokec6 Number\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 var\cf4 \strokec4  i = \cf7 \strokec7 1\cf4 \strokec4 ; i < values.length; i++) \{\cb1 \
\cb3         root = tree.insert(root, values[i]);\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     console.log(tree.getHeight(root));\cb1 \
\cb3 \});}