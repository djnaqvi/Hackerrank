{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue254;\red144\green1\blue18;
\red0\green0\blue255;\red19\green120\blue72;\red15\green112\blue1;\red14\green110\blue109;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c99608;\cssrgb\c63922\c8235\c8235;
\cssrgb\c0\c0\c100000;\cssrgb\c3529\c53333\c35294;\cssrgb\c0\c50196\c0;\cssrgb\c0\c50196\c50196;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl460\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 process.stdin.resume();\cb1 \
\cb3 process.stdin.setEncoding(\cf4 \strokec4 'ascii'\cf2 \strokec2 );\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf5 \cb3 \strokec5 var\cf2 \strokec2  input_stdin = \cf4 \strokec4 ""\cf2 \strokec2 ;\cb1 \
\cf5 \cb3 \strokec5 var\cf2 \strokec2  input_stdin_array = \cf4 \strokec4 ""\cf2 \strokec2 ;\cb1 \
\cf5 \cb3 \strokec5 var\cf2 \strokec2  input_currentline = \cf6 \strokec6 0\cf2 \strokec2 ;\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf2 \cb3 process.stdin.on(\cf4 \strokec4 'data'\cf2 \strokec2 , \cf5 \strokec5 function\cf2 \strokec2  (data) \{\cb1 \
\cb3     input_stdin += data;\cb1 \
\cb3 \});\cb1 \
\
\cb3 process.stdin.on(\cf4 \strokec4 'end'\cf2 \strokec2 , \cf5 \strokec5 function\cf2 \strokec2  () \{\cb1 \
\cb3     input_stdin_array = input_stdin.split(\cf4 \strokec4 "\\n"\cf2 \strokec2 );\cb1 \
\cb3     main();    \cb1 \
\cb3 \});\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf5 \cb3 \strokec5 function\cf2 \strokec2  readLine() \{\cb1 \
\pard\pardeftab720\sl460\partightenfactor0
\cf2 \cb3     \cf5 \strokec5 return\cf2 \strokec2  input_stdin_array[input_currentline++];\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf7 \cb3 \strokec7 /////////////// ignore above this line ////////////////////\cf2 \cb1 \strokec2 \
\
\cf7 \cb3 \strokec7 /*\cf2 \cb1 \strokec2 \
\cf7 \cb3 \strokec7  * You can use the following pseudocode:\cf2 \cb1 \strokec2 \
\cf7 \cb3 \strokec7  *\cf2 \cb1 \strokec2 \
\cf7 \cb3 \strokec7  * `S` = read string from stdin.\cf2 \cb1 \strokec2 \
\cf7 \cb3 \strokec7  * try \{\cf2 \cb1 \strokec2 \
\cf7 \cb3 \strokec7  *     `N` = numeric value of `S`.\cf2 \cb1 \strokec2 \
\cf7 \cb3 \strokec7  *     \cf2 \cb1 \strokec2 \
\cf7 \cb3 \strokec7  *     If `N` is `NaN` or `undefined`, then some exception must be thrown,\cf2 \cb1 \strokec2 \
\cf7 \cb3 \strokec7  *     you can write the following withtout using conditional statement:\cf2 \cb1 \strokec2 \
\cf7 \cb3 \strokec7  *     <condition to return true when `N` is `NaN` or `undefined`> && an_undefined_function_call()\cf2 \cb1 \strokec2 \
\cf7 \cb3 \strokec7  *\cf2 \cb1 \strokec2 \
\cf7 \cb3 \strokec7  *     print `N`\cf2 \cb1 \strokec2 \
\cf7 \cb3 \strokec7  * \} catch (err) \{\cf2 \cb1 \strokec2 \
\cf7 \cb3 \strokec7  *     print `Bad String`.\cf2 \cb1 \strokec2 \
\cf7 \cb3 \strokec7  * \}\cf2 \cb1 \strokec2 \
\cf7 \cb3 \strokec7  */\cf2 \cb1 \strokec2 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf5 \cb3 \strokec5 function\cf2 \strokec2  main() \{\cb1 \
\pard\pardeftab720\sl460\partightenfactor0
\cf2 \cb3     \cf5 \strokec5 const\cf2 \strokec2  \cf8 \strokec8 S\cf2 \strokec2  = readLine();\cb1 \
\cb3     \cf5 \strokec5 try\cf2 \strokec2  \{\cb1 \
\cb3         console.log(parseInt(\cf8 \strokec8 S\cf2 \strokec2 ).toString().replace(\cf4 \strokec4 'NaN'\cf2 \strokec2 , \cf4 \strokec4 'Bad String'\cf2 \strokec2 ));\cb1 \
\cb3     \}\cb1 \
\cb3     \cf5 \strokec5 catch\cf2 \strokec2 (\cf8 \strokec8 Exception\cf2 \strokec2 )\{\cb1 \
\cb3         console.log(\cf4 \strokec4 "Bad String"\cf2 \strokec2 );\cb1 \
\cb3     \}\cb1 \
\cb3 \}}