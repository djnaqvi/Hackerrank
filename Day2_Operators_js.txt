{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red144\green1\blue18;\red255\green255\blue254;\red0\green0\blue0;
\red0\green0\blue255;\red19\green120\blue72;\red107\green0\blue1;\red15\green112\blue1;\red14\green110\blue109;
}
{\*\expandedcolortbl;;\cssrgb\c63922\c8235\c8235;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;
\cssrgb\c0\c0\c100000;\cssrgb\c3529\c53333\c35294;\cssrgb\c50196\c0\c0;\cssrgb\c0\c50196\c0;\cssrgb\c0\c50196\c50196;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl460\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 'use strict'\cf4 \strokec4 ;\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf4 \cb3 process.stdin.resume();\cb1 \
\cb3 process.stdin.setEncoding(\cf2 \strokec2 'utf-8'\cf4 \strokec4 );\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf5 \cb3 \strokec5 let\cf4 \strokec4  inputString = \cf2 \strokec2 ''\cf4 \strokec4 ;\cb1 \
\cf5 \cb3 \strokec5 let\cf4 \strokec4  currentLine = \cf6 \strokec6 0\cf4 \strokec4 ;\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf4 \cb3 process.stdin.on(\cf2 \strokec2 'data'\cf4 \strokec4 , inputStdin => \{\cb1 \
\cb3     inputString += inputStdin;\cb1 \
\cb3 \});\cb1 \
\
\cb3 process.stdin.on(\cf2 \strokec2 'end'\cf4 \strokec4 , _ => \{\cb1 \
\cb3     inputString = inputString.replace(\cf7 \strokec7 /\\s*$/\cf4 \strokec4 , \cf2 \strokec2 ''\cf4 \strokec4 )\cb1 \
\cb3         .split(\cf2 \strokec2 '\\n'\cf4 \strokec4 )\cb1 \
\cb3         .map(str => str.replace(\cf7 \strokec7 /\\s*$/\cf4 \strokec4 , \cf2 \strokec2 ''\cf4 \strokec4 ));\cb1 \
\
\cb3     main();\cb1 \
\cb3 \});\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  readLine() \{\cb1 \
\pard\pardeftab720\sl460\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 return\cf4 \strokec4  inputString[currentLine++];\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf8 \cb3 \strokec8 // Complete the solve function below.\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl460\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  solve(meal_cost, tip_percent, tax_percent) \{\cb1 \
\pard\pardeftab720\sl460\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 var\cf4 \strokec4  tip = meal_cost * (tip_percent / \cf6 \strokec6 100\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 var\cf4 \strokec4  tax = meal_cost * (tax_percent / \cf6 \strokec6 100\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 var\cf4 \strokec4  total_cost = \cf9 \strokec9 Math\cf4 \strokec4 .round(meal_cost + tip + tax);\cb1 \
\cb3     console.log(total_cost);\cb1 \
\
\
\cb3 \}\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  main() \{\cb1 \
\pard\pardeftab720\sl460\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 const\cf4 \strokec4  meal_cost = parseFloat(readLine());\cb1 \
\
\cb3     \cf5 \strokec5 const\cf4 \strokec4  tip_percent = parseInt(readLine(), \cf6 \strokec6 10\cf4 \strokec4 );\cb1 \
\
\cb3     \cf5 \strokec5 const\cf4 \strokec4  tax_percent = parseInt(readLine(), \cf6 \strokec6 10\cf4 \strokec4 );\cb1 \
\
\cb3     solve(meal_cost, tip_percent, tax_percent);\cb1 \
\cb3 \}\cb1 \
\
}