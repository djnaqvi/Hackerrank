{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red144\green1\blue18;\red255\green255\blue254;\red0\green0\blue0;
\red0\green0\blue255;\red19\green120\blue72;\red107\green0\blue1;\red14\green110\blue109;}
{\*\expandedcolortbl;;\cssrgb\c63922\c8235\c8235;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;
\cssrgb\c0\c0\c100000;\cssrgb\c3529\c53333\c35294;\cssrgb\c50196\c0\c0;\cssrgb\c0\c50196\c50196;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl460\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 'use strict'\cf4 \strokec4 ;\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf4 \cb3 process.stdin.resume();\cb1 \
\cb3 process.stdin.setEncoding(\cf2 \strokec2 'utf-8'\cf4 \strokec4 );\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf5 \cb3 \strokec5 let\cf4 \strokec4  inputString = \cf2 \strokec2 ''\cf4 \strokec4 ;\cb1 \
\cf5 \cb3 \strokec5 let\cf4 \strokec4  currentLine = \cf6 \strokec6 0\cf4 \strokec4 ;\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf4 \cb3 process.stdin.on(\cf2 \strokec2 'data'\cf4 \strokec4 , inputStdin => \{\cb1 \
\cb3     inputString += inputStdin;\cb1 \
\cb3 \});\cb1 \
\
\cb3 process.stdin.on(\cf2 \strokec2 'end'\cf4 \strokec4 , _ => \{\cb1 \
\cb3     inputString = inputString.replace(\cf7 \strokec7 /\\s*$/\cf4 \strokec4 , \cf2 \strokec2 ''\cf4 \strokec4 )\cb1 \
\cb3         .split(\cf2 \strokec2 '\\n'\cf4 \strokec4 )\cb1 \
\cb3         .map(str => str.replace(\cf7 \strokec7 /\\s*$/\cf4 \strokec4 , \cf2 \strokec2 ''\cf4 \strokec4 ));\cb1 \
\
\cb3     main();\cb1 \
\cb3 \});\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  readLine() \{\cb1 \
\pard\pardeftab720\sl460\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 return\cf4 \strokec4  inputString[currentLine++];\cb1 \
\cb3 \}\cb1 \
\
\
\
\pard\pardeftab720\sl460\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  main() \{\cb1 \
\pard\pardeftab720\sl460\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 let\cf4 \strokec4  arr = \cf8 \strokec8 Array\cf4 \strokec4 (\cf6 \strokec6 6\cf4 \strokec4 );\cb1 \
\
\cb3     \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  i = \cf6 \strokec6 0\cf4 \strokec4 ; i < \cf6 \strokec6 6\cf4 \strokec4 ; i++) \{\cb1 \
\cb3         arr[i] = readLine().split(\cf2 \strokec2 ' '\cf4 \strokec4 ).map(arrTemp => parseInt(arrTemp, \cf6 \strokec6 10\cf4 \strokec4 ));\cb1 \
\cb3     \}\cb1 \
\cb3     \cf5 \strokec5 var\cf4 \strokec4  maxSum = -\cf6 \strokec6 63\cf4 \strokec4 ;\cb1 \
\cb3     \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 var\cf4 \strokec4  i = \cf6 \strokec6 0\cf4 \strokec4 ; i < arr.length - \cf6 \strokec6 2\cf4 \strokec4 ; i++)\{\cb1 \
\cb3         \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 var\cf4 \strokec4  j = \cf6 \strokec6 0\cf4 \strokec4 , curSum = \cf6 \strokec6 0\cf4 \strokec4 ; j < arr[i].length - \cf6 \strokec6 2\cf4 \strokec4 ; j++)\{\cb1 \
\cb3             curSum = arr[i][j] + arr[i][j + \cf6 \strokec6 1\cf4 \strokec4 ] + arr[i][j + \cf6 \strokec6 2\cf4 \strokec4 ]\cb1 \
\cb3                 + arr[i + \cf6 \strokec6 1\cf4 \strokec4 ][j + \cf6 \strokec6 1\cf4 \strokec4 ]\cb1 \
\cb3                 + arr[i + \cf6 \strokec6 2\cf4 \strokec4 ][j] + arr[i + \cf6 \strokec6 2\cf4 \strokec4 ][j + \cf6 \strokec6 1\cf4 \strokec4 ] + arr[i + \cf6 \strokec6 2\cf4 \strokec4 ][j + \cf6 \strokec6 2\cf4 \strokec4 ];\cb1 \
\cb3             \cf5 \strokec5 if\cf4 \strokec4  (curSum > maxSum) \{\cb1 \
\cb3                 maxSum = curSum;\cb1 \
\cb3             \}\cb1 \
\cb3         \}\cb1 \
\cb3     \}\cb1 \
\cb3     console.log(maxSum);\cb1 \
\cb3 \}}